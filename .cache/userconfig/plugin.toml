[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'

# input complete
[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
    " neocomplete start --------------------------------------------------
    " Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    " inoremap <expr><C-i> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><CR> pumvisible() ? "\<C-y>" : "\<CR>"

    " Close popup by <Space>.
    " inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    " autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    " neocomplete end ----------------------------------------------------
'''
# :Q quickrun
[[plugins]]
repo = "thinca/vim-quickrun"

# indent guide
[[plugins]]
repo = "nathanaelkane/vim-indent-guides"
hook_add = '''
    " indent guide ---------------------------------------------------------
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=8
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=235
    let g:indent_guides_guide_size = 1
    let g:indent_guides_start_level = 2
    " indent guide ---------------------------------------------------------
'''

# color 
[[plugins]]
repo = "tomasr/molokai"
hook_add = '''
    set t_Co=256
    au MyAutoCmd VimEnter * nested colorscheme molokai
'''

# syntax chacker 
[[plugins]]
repo = "w0rp/ale"
hook_add = '''
    " ale (start) -----------------------------------------------------------
    " 保存時のみ実行する
    let g:ale_lint_on_text_changed = 0
    " 表示に関する設定
    let g:airline#extensions#ale#open_lnum_symbol = '('
    let g:airline#extensions#ale#close_lnum_symbol = ')'
    let g:ale_echo_msg_format = '[%linter%]%code: %%s'
    highlight link ALEErrorSign Tag
    highlight link ALEWarningSign StorageClass
    " Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)
    " " ale (end) -----------------------------------------------------------
'''

# git 
[[plugins]]
repo = "tpope/vim-fugitive"

# show directory tree (F2)
[[plugins]]
repo = "scrooloose/nerdtree"
hook_add = '''
    map <F2> :NERDTreeToggle<CR>
    let NERDTreeShowHidden = 1
'''

# for terraform 
[[plugins]]
repo = "hashivim/vim-terraform"
hook_add = '''
    let g:terraform_align=1
    let g:terraform_fmt_on_save=1
    let g:terraform_fold_sections=1
'''

#======================footbar関連========================
[[plugins]]
repo = "vim-airline/vim-airline-themes"

[[plugins]]
repo = "ryanoasis/vim-devicons"

[[plugins]]
repo = "vim-airline/vim-airline"
hook_add = '''
    let g:airline_theme = 'wombat'
    set laststatus=2
    let g:airline#extensions#branch#enabled = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#wordcount#enabled = 0
    let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]
    let g:airline_section_c = '%t'
    let g:airline_section_x = '%{&filetype}'
    let g:airline_section_z = '%3l:%2v %{airline#extensions#ale#get_warning()} %{airline#extensions#ale#get_error()}'
    let g:airline#extensions#ale#error_symbol = '  '
    let g:airline#extensions#ale#warning_symbol = '  '
    let g:airline#extensions#default#section_truncate_width = {}
    let g:airline#extensions#whitespace#enabled = 1 
'''
#======================footbar関連========================

# yank履歴機能
[[plugins]]
repo = "LeafCage/yankround.vim"
depends = ['Shougo/neomru.vim']
hook_add = '''
    nmap p <Plug>(yankround-p)
    xmap p <Plug>(yankround-p)
    nmap P <Plug>(yankround-P)
    nmap gp <Plug>(yankround-gp)
    xmap gp <Plug>(yankround-gp)
    nmap gP <Plug>(yankround-gP)
    nmap <C-p> <Plug>(yankround-prev)
    nmap <C-n> <Plug>(yankround-next)
'''

# カッコ補完
[[plugins]]
repo = "Raimondi/delimitMate"
